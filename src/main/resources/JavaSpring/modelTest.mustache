package {{package}};

{{#imports}}import {{import}};
{{/imports}}
{{#jdk8}}

import io.starter.ignite.model.DataModelObject;
import io.starter.ignite.generator.IgniteException;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.core.type.TypeReference;

{{/jdk8}}
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.json.*;
{{#jdk8}}
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
{{/jdk8}}
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;
{{#jdk8}}
import java.io.IOException;
{{/jdk8}}

{{#jdk8}}
import javax.servlet.http.HttpServletRequest;
{{/jdk8}}
import java.util.List;
{{#jdk8}}
{{/jdk8}}
{{^jdk8}}
    {{#useOptional}}
import java.util.Optional;
    {{/useOptional}}
{{/jdk8}}

{{#async}}
import java.util.concurrent.{{^jdk8}}Callable{{/jdk8}}{{#jdk8}}CompletableFuture{{/jdk8}};
{{/async}}

{{#operations}}
/**
 * A Test of {@link {{classname}}}}.
 *
 *
 {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 ############################## DO NOT EDIT: GENERATED FILE ##############################

    Generated by Starter StackGen: http://stackgen.io
    Powered by Swagger Codegen: http://swagger.io
    
    Template File: java_spring_mybatis_react_redux/src/main/java/spring-boot/modelTest.mustache

############################## DO NOT EDIT: GENERATED FILE ##############################
 */
{{>generatedAnnotation}}
@EnableWebMvc
public interface {{classname}}Test {
{{#jdk8}}

    Logger log = LoggerFactory.getLogger({{classname}}Test.class);

    ObjectMapper getObjectMapper();
    
    
{{/jdk8}}

{{#operation}}


// CREATE A TEST FOR {{classname}}#{{operationId}}



    /**
     * Test {{operationId}}
     *
     * @see {{classname}}#{{operationId}}
     */
    {{#jdk8}}default {{/jdk8}}{{#responseWrapper}}{{.}}<{{/responseWrapper}}ResponseEntity<{{>returnTypes}}>{{#responseWrapper}}>{{/responseWrapper}} {{operationId}}({{#allParams}}{{^isFile}} {{>optionalDataType}} {{/isFile}}{{#isFile}}MultipartFile{{/isFile}} {{paramName}}{{#hasMore}},
        {{/hasMore}}{{/allParams}}){{^jdk8}};{{/jdk8}}{{#jdk8}} {

        /*if(getObjectMapper() != null && getAcceptHeader() != null) {

	        // {{operationId}}({{paramName}});  -{{>optionalDataType}} {{baseName}}
			try {
				Object ret = callMethod("{{operationId}}"{{#allParams}}, {{paramName}}{{#hasMore}} {{/hasMore}}{{/allParams}});
				if (ret != null) {
					if (ret instanceof List) {
						return {{#async}}CompletableFuture.completedFuture({{/async}}
						(ResponseEntity<{{>returnTypes}}>) getResponse((List<?>) ret){{#async}}){{/async}};
					} else {
						return {{#async}}CompletableFuture.completedFuture({{/async}}
						(ResponseEntity<{{>returnTypes}}>) getResponse(this){{#async}}){{/async}};
					}
				} else {
					return new ResponseEntity<>(HttpStatus.NOT_FOUND);
				}
			} catch (Exception e) {
				log.error("Failure running method {{classname}}.{{operationId}}: "
						+ e);
				return new ResponseEntity<>(HttpStatus.  INTERNAL_SERVER_ERROR);
			}
        {{#examples}}
        // TODO: implement examples
        {{/examples}}
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default {{classname}} interface so no example is generated");
        }
        return {{#async}}CompletableFuture.completedFuture({{/async}}new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED){{#async}}){{/async}};
        */
        return null;
    }{{/jdk8}}
{{/operation}}


/* TODO: implement examples
    if (getAcceptHeader().contains("{{{contentType}}}")) {
        try {
                return {{#async}}CompletableFuture.completedFuture({{/async}}new ResponseEntity<>(getObjectMapper().readValue("{{#lambdaRemoveLineBreak}}{{#lambdaEscapeDoubleQuote}}{{{example}}}{{/lambdaEscapeDoubleQuote}}{{/lambdaRemoveLineBreak}}", {{>exampleReturnTypes}}.class), HttpStatus.NOT_IMPLEMENTED){{#async}}){{/async}};
        } catch (IOException e) {
            log.error("Couldn't serialize response for content type {{{contentType}}}", e);
            return {{#async}}CompletableFuture.completedFuture({{/async}}new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR){{#async}}){{/async}};
        }
    }
*/

{{/operations}}
